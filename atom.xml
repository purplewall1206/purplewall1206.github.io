<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>purplewall1206 blog</title>
  
  
  <link href="https://www.zi-c.wang/atom.xml" rel="self"/>
  
  <link href="https://www.zi-c.wang/"/>
  <updated>2021-07-28T04:57:32.946Z</updated>
  <id>https://www.zi-c.wang/</id>
  
  <author>
    <name>purplewall1206</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>make-输出过程信息</title>
    <link href="https://www.zi-c.wang/2021/07/28/make-%E8%BE%93%E5%87%BA%E8%BF%87%E7%A8%8B%E4%BF%A1%E6%81%AF/"/>
    <id>https://www.zi-c.wang/2021/07/28/make-%E8%BE%93%E5%87%BA%E8%BF%87%E7%A8%8B%E4%BF%A1%E6%81%AF/</id>
    <published>2021-07-28T04:55:37.000Z</published>
    <updated>2021-07-28T04:57:32.946Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="compiler" scheme="https://www.zi-c.wang/tags/compiler/"/>
    
    <category term="make" scheme="https://www.zi-c.wang/tags/make/"/>
    
  </entry>
  
  <entry>
    <title>内核如何检测CPU features支持</title>
    <link href="https://www.zi-c.wang/2021/04/23/%E5%86%85%E6%A0%B8%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8BCPU-features%E6%94%AF%E6%8C%81/"/>
    <id>https://www.zi-c.wang/2021/04/23/%E5%86%85%E6%A0%B8%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8BCPU-features%E6%94%AF%E6%8C%81/</id>
    <published>2021-04-23T08:23:53.000Z</published>
    <updated>2021-04-23T08:24:47.641Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;linux内核如何检查存在CPU-features支持&quot;&gt;&lt;a href=&quot;#linux内核如何检查存在CPU-features支持&quot; class=&quot;headerlink&quot; title=&quot;linux内核如何检查存在CPU features支持&quot;&gt;&lt;/a&gt;linux内核如何检查存在CPU features支持&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://elixir.bootlin.com/linux/v5.10.25/source/arch/x86/include/asm/cpufeatures.h&quot;&gt;elixir code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码所在地址 &lt;code&gt;arch/x86/include/asm/cpufeatures.h&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="cpu" scheme="https://www.zi-c.wang/tags/cpu/"/>
    
  </entry>
  
  <entry>
    <title>llvm-pass-build</title>
    <link href="https://www.zi-c.wang/2021/04/03/llvm-pass-build/"/>
    <id>https://www.zi-c.wang/2021/04/03/llvm-pass-build/</id>
    <published>2021-04-03T09:02:18.000Z</published>
    <updated>2021-04-03T09:03:43.219Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;llvm-pass-build&quot;&gt;&lt;a href=&quot;#llvm-pass-build&quot; class=&quot;headerlink&quot; title=&quot;llvm-pass-build&quot;&gt;&lt;/a&gt;llvm-pass-build&lt;/h1&gt;&lt;p&gt;llvm pass 编译有三种方式，直接上clang干，或者使用github skeleton项目给出的cmake，或者直接make&lt;/p&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;这里有个非常诡异的问题， &lt;code&gt;opt -load mypass.so&lt;/code&gt;显示文件格式错误，但是&lt;code&gt;opt -load ./mypass.so&lt;/code&gt; 就可以正常使用&lt;/p&gt;
&lt;p&gt;因此记得 &lt;strong&gt;opt -load ./mypass.so&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;clang&quot;&gt;&lt;a href=&quot;#clang&quot; class=&quot;headerlink&quot; title=&quot;clang&quot;&gt;&lt;/a&gt;clang&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clang &amp;#96;llvm-config --cxxflags&amp;#96; -Wl,-znodelete -fno-rtti -fPIC -shared Hello.cpp -o LLVMHello.so &amp;#96;llvm-config --ldflags&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opt -load .&amp;#x2F;LLVMHello.so -hello test.bc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="llvm" scheme="https://www.zi-c.wang/tags/llvm/"/>
    
    <category term="compiler" scheme="https://www.zi-c.wang/tags/compiler/"/>
    
    <category term="llvm-pass" scheme="https://www.zi-c.wang/tags/llvm-pass/"/>
    
    <category term="instrumentation" scheme="https://www.zi-c.wang/tags/instrumentation/"/>
    
  </entry>
  
  <entry>
    <title>llvm 获取代码+编译</title>
    <link href="https://www.zi-c.wang/2021/04/03/llvm-%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%A0%81-%E7%BC%96%E8%AF%91/"/>
    <id>https://www.zi-c.wang/2021/04/03/llvm-%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%A0%81-%E7%BC%96%E8%AF%91/</id>
    <published>2021-04-03T07:39:08.000Z</published>
    <updated>2021-04-03T08:54:47.892Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;llvm-获取代码-编译&quot;&gt;&lt;a href=&quot;#llvm-获取代码-编译&quot; class=&quot;headerlink&quot; title=&quot;llvm 获取代码+编译&quot;&gt;&lt;/a&gt;llvm 获取代码+编译&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Swap_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E4%BA%A4%E6%8D%A2%E6%96%87%E4%BB%B6&quot;&gt;swapfile&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.aosabook.org/en/llvm.html&quot;&gt;llvm作者写的文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://llvm.org/docs/GettingStarted.html#id17&quot;&gt;llvm-doc&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://llvm.org/docs/tutorial/index.html&quot;&gt;llvm-tutorial&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36769900&quot;&gt;zhihu-编译llvm内存不够情况&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/67625228&quot;&gt;zhihu-编译llvm clang&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://clangbuiltlinux.github.io/&quot;&gt;ClangBuiltLinux&lt;/a&gt;&lt;br&gt;&lt;a href&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;获取源代码&quot;&gt;&lt;a href=&quot;#获取源代码&quot; class=&quot;headerlink&quot; title=&quot;获取源代码&quot;&gt;&lt;/a&gt;获取源代码&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https:&amp;#x2F;&amp;#x2F;gitee.com&amp;#x2F;mirrors&amp;#x2F;llvm-project.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout llvmorg-12.0.0-rc2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 因为zzzq的原因master分支不让用了,本次编译了rc2 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;github不加代理实在太慢了&lt;/p&gt;
&lt;p&gt;编译出来结果至少有120GB，因此最好分配一个200GB的虚拟机&lt;/p&gt;</summary>
    
    
    
    
    <category term="compile" scheme="https://www.zi-c.wang/tags/compile/"/>
    
    <category term="llvm" scheme="https://www.zi-c.wang/tags/llvm/"/>
    
  </entry>
  
  <entry>
    <title>kernel compile: obj-m or obj-y</title>
    <link href="https://www.zi-c.wang/2021/03/01/kernel-compile-obj-m-or-obj-y/"/>
    <id>https://www.zi-c.wang/2021/03/01/kernel-compile-obj-m-or-obj-y/</id>
    <published>2021-03-01T08:14:14.000Z</published>
    <updated>2021-03-01T08:14:48.766Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
    <category term="compile" scheme="https://www.zi-c.wang/tags/compile/"/>
    
  </entry>
  
  <entry>
    <title>为什么LKM无法直接调用swapper_pg_dir--内核中的static变量和函数</title>
    <link href="https://www.zi-c.wang/2021/03/01/%E4%B8%BA%E4%BB%80%E4%B9%88LKM%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8swapper-pg-dir-%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84static%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://www.zi-c.wang/2021/03/01/%E4%B8%BA%E4%BB%80%E4%B9%88LKM%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8swapper-pg-dir-%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84static%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0/</id>
    <published>2021-03-01T08:09:53.000Z</published>
    <updated>2021-03-02T02:04:00.484Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;kernel-static-functions-内核静态函数&quot;&gt;&lt;a href=&quot;#kernel-static-functions-内核静态函数&quot; class=&quot;headerlink&quot; title=&quot;kernel static functions 内核静态函数&quot;&gt;&lt;/a&gt;kernel static functions 内核静态函数&lt;/h1&gt;&lt;p&gt;在编写drivers想要调用一些敏感的内核函数时，往往会出现&lt;code&gt;xxx undefined&lt;/code&gt;这种情况，并不能通过加入头文件的方式解决。&lt;/p&gt;
&lt;p&gt;深入了解一下，以&lt;code&gt;__p4d_alloc&lt;/code&gt;为例：&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;include/linux/mm.h&lt;/code&gt;中声明&lt;code&gt;static inline int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address)&lt;/code&gt; 为静态内联函数&lt;/p&gt;
&lt;p&gt;那么为什么在driver中无法调用静态函数呢？这回归到了C语言的一个基础问题，static到底是做什么的？&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
    <category term="c" scheme="https://www.zi-c.wang/tags/c/"/>
    
    <category term="programming" scheme="https://www.zi-c.wang/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>内核栈与vmap kernel stack</title>
    <link href="https://www.zi-c.wang/2021/01/15/%E5%86%85%E6%A0%B8%E6%A0%88%E4%B8%8Evmap-kernel-stack/"/>
    <id>https://www.zi-c.wang/2021/01/15/%E5%86%85%E6%A0%B8%E6%A0%88%E4%B8%8Evmap-kernel-stack/</id>
    <published>2021-01-15T08:37:32.000Z</published>
    <updated>2021-01-15T08:40:29.298Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/692208/&quot;&gt;Virtually mapped kernel stacks&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/691631/&quot;&gt;Virtually mapped stacks with guard pages (x86, core)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kernel stack在64位系统上通常是8k或16k连续映射，但是很容易造成溢出，而且在内存被大量占用的情况下不太容易找到连续的2页或4页。&lt;/p&gt;
&lt;p&gt;因此有开发者提出了解决办法，使用vmap解决这两个问题,使得内核栈在溢出时print一个错误信息。&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
    <category term="stack" scheme="https://www.zi-c.wang/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>装机</title>
    <link href="https://www.zi-c.wang/2020/12/27/%E8%A3%85%E6%9C%BA/"/>
    <id>https://www.zi-c.wang/2020/12/27/%E8%A3%85%E6%9C%BA/</id>
    <published>2020-12-27T01:43:23.000Z</published>
    <updated>2020-12-27T02:20:32.427Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;装机-硬件设备厂家选择&quot;&gt;&lt;a href=&quot;#装机-硬件设备厂家选择&quot; class=&quot;headerlink&quot; title=&quot;装机-硬件设备厂家选择&quot;&gt;&lt;/a&gt;装机-硬件设备厂家选择&lt;/h1&gt;&lt;p&gt;20201226&lt;/p&gt;
&lt;p&gt;装机主要分成八个部分：CPU，主板，内存，显卡，硬盘，电源，散热，机箱&lt;/p&gt;
&lt;p&gt;这篇文章主要是分析八种硬件有哪些型号，性能对比，以及厂商的质量和价格，最终目的是设计一套合理的装机配置。&lt;/p&gt;</summary>
    
    
    
    
    <category term="硬件" scheme="https://www.zi-c.wang/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="装机" scheme="https://www.zi-c.wang/tags/%E8%A3%85%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>access_ok 重要的函数指针传递分析</title>
    <link href="https://www.zi-c.wang/2020/12/15/access-ok-%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%BC%A0%E9%80%92%E5%88%86%E6%9E%90/"/>
    <id>https://www.zi-c.wang/2020/12/15/access-ok-%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%BC%A0%E9%80%92%E5%88%86%E6%9E%90/</id>
    <published>2020-12-15T01:45:55.000Z</published>
    <updated>2020-12-15T01:47:24.600Z</updated>
    
    
    <summary type="html">&lt;p&gt;/arch/x86/include/asm/uaccess.h&lt;/p&gt;
&lt;p&gt;用于检查user space 的指针，是否超过用户地址空间的界限，读取或写入内核地址。&lt;/p&gt;
&lt;p&gt;Checks if a pointer to a block of memory in user space is valid.&lt;/p&gt;
&lt;p&gt;Note that, depending on architecture, this function probably just checks that the pointer is in the user space range&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>typedef code pointer 代码指针</title>
    <link href="https://www.zi-c.wang/2020/12/12/typedef-code-pointer-%E4%BB%A3%E7%A0%81%E6%8C%87%E9%92%88/"/>
    <id>https://www.zi-c.wang/2020/12/12/typedef-code-pointer-%E4%BB%A3%E7%A0%81%E6%8C%87%E9%92%88/</id>
    <published>2020-12-12T08:55:39.000Z</published>
    <updated>2020-12-12T08:56:46.222Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;typedef&lt;/code&gt; 是把一个名字和一个类型联系起来。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef int myinteger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef char *mystring;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef void (*myfunc)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myinteger i;   &amp;#x2F;&amp;#x2F; is equivalent to    int i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mystring s;    &amp;#x2F;&amp;#x2F; is the same as      char *s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myfunc f;      &amp;#x2F;&amp;#x2F; compile equally as  void (*f)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
    <category term="c" scheme="https://www.zi-c.wang/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>kernel memory layout</title>
    <link href="https://www.zi-c.wang/2020/12/11/kernel-memory-layout/"/>
    <id>https://www.zi-c.wang/2020/12/11/kernel-memory-layout/</id>
    <published>2020-12-11T13:20:41.000Z</published>
    <updated>2020-12-11T13:22:03.478Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/x86/x86_64/mm.html&quot;&gt;latest mm documentation&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/x86/boot.html?highlight=layout&quot;&gt;latest boot documentatino&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/338009/&quot;&gt;x86: fix return from kernel to userspace with 16-bit stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;/Documentation/x86/x86_64/mm.txt&lt;/p&gt;
&lt;p&gt;/Documentation/x86/boot.txt&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux User-mode Driver</title>
    <link href="https://www.zi-c.wang/2020/11/28/Linux-User-mode-Driver/"/>
    <id>https://www.zi-c.wang/2020/11/28/Linux-User-mode-Driver/</id>
    <published>2020-11-28T07:18:10.000Z</published>
    <updated>2020-12-01T07:43:04.395Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;UIO-userspace-i-o&quot;&gt;&lt;a href=&quot;#UIO-userspace-i-o&quot; class=&quot;headerlink&quot; title=&quot;UIO userspace i/o&quot;&gt;&lt;/a&gt;UIO userspace i/o&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/825190/&quot;&gt;20200702Make the user mode driver code a better citizen&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/66829/&quot;&gt;20040120User-space device drivers&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://tldp.org/LDP/khg/HyperNews/get/devices/fake.html&quot;&gt;tldp userspace device driver&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/703785/&quot;&gt;20161019Linux drivers in user space — a survey&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/232575/&quot;&gt;UIO: user-space drivers&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/driver-api/uio-howto.html?highlight=uio&quot;&gt;The Userspace I/O HOWTO&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="Driver" scheme="https://www.zi-c.wang/tags/Driver/"/>
    
    <category term="Linux" scheme="https://www.zi-c.wang/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>kernel-exploit-vm搭建</title>
    <link href="https://www.zi-c.wang/2020/11/28/kernel-exploit-vm%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.zi-c.wang/2020/11/28/kernel-exploit-vm%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-28T07:15:29.000Z</published>
    <updated>2020-11-28T07:19:06.967Z</updated>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;环境：Manjaro(archlinux)18   Linux wangzc-pc 4.14.193-1-MANJARO  x86_64 GNU/Linux&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="vm" scheme="https://www.zi-c.wang/tags/vm/"/>
    
    <category term="exploit" scheme="https://www.zi-c.wang/tags/exploit/"/>
    
  </entry>
  
  <entry>
    <title>二叉树非递归遍历</title>
    <link href="https://www.zi-c.wang/2020/11/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/"/>
    <id>https://www.zi-c.wang/2020/11/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/</id>
    <published>2020-11-24T02:28:59.000Z</published>
    <updated>2020-11-24T05:43:42.653Z</updated>
    
    
    <summary type="html">&lt;p&gt;二叉树非递归遍历总是容易忘，这次从原理出发理解一次。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#x2F; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2   3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#x2F; \ &amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4  5 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://www.zi-c.wang/tags/leetcode/"/>
    
    <category term="algorithm" scheme="https://www.zi-c.wang/tags/algorithm/"/>
    
    <category term="binarytree" scheme="https://www.zi-c.wang/tags/binarytree/"/>
    
  </entry>
  
  <entry>
    <title>NJU研究生通知RSS</title>
    <link href="https://www.zi-c.wang/2020/11/19/NJU%E7%A0%94%E7%A9%B6%E7%94%9F%E9%80%9A%E7%9F%A5RSS/"/>
    <id>https://www.zi-c.wang/2020/11/19/NJU%E7%A0%94%E7%A9%B6%E7%94%9F%E9%80%9A%E7%9F%A5RSS/</id>
    <published>2020-11-19T06:39:45.000Z</published>
    <updated>2020-11-21T08:54:32.396Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;NJU-notifeed&quot;&gt;&lt;a href=&quot;#NJU-notifeed&quot; class=&quot;headerlink&quot; title=&quot;NJU-notifeed&quot;&gt;&lt;/a&gt;NJU-notifeed&lt;/h1&gt;&lt;p&gt;Nanjing University notification feed&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/purplewall1206/NJU-notifeed&quot;&gt;https://github.com/purplewall1206/NJU-notifeed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接订阅：&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://idcvz.zi-c.wang:8000/rss&quot;&gt;http://idcvz.zi-c.wang:8000/rss&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://www.zi-c.wang/categories/python/"/>
    
    <category term="rss" scheme="https://www.zi-c.wang/categories/python/rss/"/>
    
    <category term="github" scheme="https://www.zi-c.wang/categories/python/rss/github/"/>
    
    
    <category term="python" scheme="https://www.zi-c.wang/tags/python/"/>
    
    <category term="rss" scheme="https://www.zi-c.wang/tags/rss/"/>
    
    <category term="github" scheme="https://www.zi-c.wang/tags/github/"/>
    
    <category term="NJU" scheme="https://www.zi-c.wang/tags/NJU/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 内核编译</title>
    <link href="https://www.zi-c.wang/2020/11/16/Raspberry-Pi-%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/"/>
    <id>https://www.zi-c.wang/2020/11/16/Raspberry-Pi-%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</id>
    <published>2020-11-16T12:06:10.000Z</published>
    <updated>2020-11-16T12:10:02.276Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我的版本 : 树莓派3&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-内核获取&quot;&gt;&lt;a href=&quot;#1-内核获取&quot; class=&quot;headerlink&quot; title=&quot;1.内核获取&quot;&gt;&lt;/a&gt;1.内核获取&lt;/h1&gt;&lt;h2 id=&quot;1-1-软件下载&quot;&gt;&lt;a href=&quot;#1-1-软件下载&quot; class=&quot;headerlink&quot; title=&quot;1.1.软件下载&quot;&gt;&lt;/a&gt;1.1.软件下载&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sudo apt install git bc bison flex libssl-dev make&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/categories/kernel/"/>
    
    <category term="raspberryPi" scheme="https://www.zi-c.wang/categories/kernel/raspberryPi/"/>
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="raspberryPi" scheme="https://www.zi-c.wang/tags/raspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>三剑客sed/awk/grep常用速查</title>
    <link href="https://www.zi-c.wang/2020/11/16/%E4%B8%89%E5%89%91%E5%AE%A2sed-awk-grep%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/"/>
    <id>https://www.zi-c.wang/2020/11/16/%E4%B8%89%E5%89%91%E5%AE%A2sed-awk-grep%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/</id>
    <published>2020-11-16T06:22:23.000Z</published>
    <updated>2020-11-16T06:24:22.817Z</updated>
    
    
    <summary type="html">&lt;p&gt;sed和awk的区别，都是按行读入，但是awk会拆分行里面的元素，sed则直接用正则做匹配，基本上sed可以做到的awk都可以。&lt;/p&gt;
&lt;h1 id=&quot;awk&quot;&gt;&lt;a href=&quot;#awk&quot; class=&quot;headerlink&quot; title=&quot;awk&quot;&gt;&lt;/a&gt;awk&lt;/h1&gt;&lt;p&gt;&lt;code&gt;awk &amp;#39;&amp;#123;printf &amp;quot;%-8s %-8s %-8s %-18s %-22s %-15s\n&amp;quot;,$1,$2,$3,$4,$5,$6&amp;#125;&amp;#39; netstat.txt&lt;/code&gt; awk 使用print和printf打印每行中按列分布的元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;awk &amp;#39;$3==0 &amp;amp;&amp;amp; $6==&amp;quot;ESTABLISHED&amp;quot;&amp;#39; netstat.txt&lt;/code&gt; 过滤记录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;awk &amp;#39;$3==0 &amp;amp;&amp;amp; $6==&amp;quot;ESTABLISHED&amp;quot; || NR==1 &amp;#123;printf &amp;quot;%02s %s %-20s %-20s %s\n&amp;quot;,NR, FNR, $4,$5,$6&amp;#125;&amp;#39; netstat.txt&lt;/code&gt; 其中NR，FNR为内建变量&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://www.zi-c.wang/categories/linux/"/>
    
    <category term="bash" scheme="https://www.zi-c.wang/categories/linux/bash/"/>
    
    
    <category term="bash" scheme="https://www.zi-c.wang/tags/bash/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
    <category term="tool" scheme="https://www.zi-c.wang/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>kernel contribution 统计</title>
    <link href="https://www.zi-c.wang/2020/11/16/kernel-contribution-%E7%BB%9F%E8%AE%A1/"/>
    <id>https://www.zi-c.wang/2020/11/16/kernel-contribution-%E7%BB%9F%E8%AE%A1/</id>
    <published>2020-11-16T06:19:37.000Z</published>
    <updated>2020-11-16T06:24:36.180Z</updated>
    
    
    <summary type="html">&lt;p&gt;保存lwn.net发布的新版本开发统计文章，目前来看还是华为最屌。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/780271/&quot;&gt;Development statistics for the 5.0 kernel&lt;/a&gt;&lt;br&gt;As of this writing, 12,517 non-merge changesets have been pulled into the mainline repository for the 5.0 release&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/810639/&quot;&gt;Some 5.5 kernel development statistics&lt;/a&gt;&lt;br&gt;5.5 saw the merging of 14,350 non-merge changesets from 1,885 developers&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="lwn.net" scheme="https://www.zi-c.wang/tags/lwn-net/"/>
    
  </entry>
  
  <entry>
    <title>io_uring 系统性整理</title>
    <link href="https://www.zi-c.wang/2020/11/15/io-uring-%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%95%B4%E7%90%86/"/>
    <id>https://www.zi-c.wang/2020/11/15/io-uring-%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%95%B4%E7%90%86/</id>
    <published>2020-11-15T11:42:54.000Z</published>
    <updated>2020-11-15T11:52:18.240Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;io-uring-系统性整理&quot;&gt;&lt;a href=&quot;#io-uring-系统性整理&quot; class=&quot;headerlink&quot; title=&quot;io_uring 系统性整理&quot;&gt;&lt;/a&gt;io_uring 系统性整理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#io_uring-%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%95%B4%E7%90%86&quot;&gt;io_uring 系统性整理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#io-%E6%A8%A1%E5%9E%8B&quot;&gt;I/O 模型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#comparison&quot;&gt;comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#asynchronous-io&quot;&gt;Asynchronous I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#io_uring&quot;&gt;io_uring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93%E9%82%AE%E4%BB%B6&quot;&gt;总结邮件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有个误解，I/O模型其实是针对整个系统的所有I/O操作的，但是平时很少对文件系统使用异步读写，同步或直接映射的情况比较多。更别提多路复用了，这个机制基本只用在network中。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lwn.net/Kernel/Index/&quot;&gt;lwn Kernel article index&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="io_uring" scheme="https://www.zi-c.wang/tags/io-uring/"/>
    
  </entry>
  
  <entry>
    <title>eBPF 简介</title>
    <link href="https://www.zi-c.wang/2020/11/15/eBPF-%E7%AE%80%E4%BB%8B/"/>
    <id>https://www.zi-c.wang/2020/11/15/eBPF-%E7%AE%80%E4%BB%8B/</id>
    <published>2020-11-15T11:17:06.000Z</published>
    <updated>2020-11-15T11:52:20.424Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;eBPF&quot;&gt;&lt;a href=&quot;#eBPF&quot; class=&quot;headerlink&quot; title=&quot;eBPF&quot;&gt;&lt;/a&gt;eBPF&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ebpf&quot;&gt;eBPF&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E7%AE%80%E4%BB%8B&quot;&gt;1. 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E5%8F%82%E8%80%83%E6%9D%90%E6%96%99&quot;&gt;2. 参考材料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-in-kernel-virtual-machine&quot;&gt;3. in-kernel virtual machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-jit-just-in-time-compile&quot;&gt;4. JIT just-in-time compile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-kprobe-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86&quot;&gt;5. kprobe 实现原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://ebpf.io/summit-2020/&quot;&gt;ebpf summit 2020峰会&lt;/a&gt; 这个有时间应该看一下&lt;/p&gt;
&lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;eBPF由BPF（berkeley packet filter发展而来，BPF现在也叫classic-BPF由于区别BPF），到目前为止被引入了linux内核并且使用了JIT just in time comilper进行加速，类似于浏览器的javascript脚本执行语言。&lt;/p&gt;
&lt;p&gt;eBPF定义了一个内核内运行的虚拟机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/11/15/eBPF-%E7%AE%80%E4%BB%8B/ebpf-arch.png&quot; alt=&quot;ebpf-arch&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用bcc进行bpf的开发，bcc和bpftrace项目的维护放在 &lt;strong&gt;iovisor&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="eBPF" scheme="https://www.zi-c.wang/categories/eBPF/"/>
    
    
    <category term="eBPF" scheme="https://www.zi-c.wang/tags/eBPF/"/>
    
  </entry>
  
</feed>
