<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>purplewall1206 blog</title>
  
  
  <link href="https://www.zi-c.wang/atom.xml" rel="self"/>
  
  <link href="https://www.zi-c.wang/"/>
  <updated>2020-12-27T02:20:32.427Z</updated>
  <id>https://www.zi-c.wang/</id>
  
  <author>
    <name>purplewall1206</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>装机</title>
    <link href="https://www.zi-c.wang/2020/12/27/%E8%A3%85%E6%9C%BA/"/>
    <id>https://www.zi-c.wang/2020/12/27/%E8%A3%85%E6%9C%BA/</id>
    <published>2020-12-27T01:43:23.000Z</published>
    <updated>2020-12-27T02:20:32.427Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;装机-硬件设备厂家选择&quot;&gt;&lt;a href=&quot;#装机-硬件设备厂家选择&quot; class=&quot;headerlink&quot; title=&quot;装机-硬件设备厂家选择&quot;&gt;&lt;/a&gt;装机-硬件设备厂家选择&lt;/h1&gt;&lt;p&gt;20201226&lt;/p&gt;
&lt;p&gt;装机主要分成八个部分：CPU，主板，内存，显卡，硬盘，电源，散热，机箱&lt;/p&gt;
&lt;p&gt;这篇文章主要是分析八种硬件有哪些型号，性能对比，以及厂商的质量和价格，最终目的是设计一套合理的装机配置。&lt;/p&gt;</summary>
    
    
    
    
    <category term="硬件" scheme="https://www.zi-c.wang/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="装机" scheme="https://www.zi-c.wang/tags/%E8%A3%85%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>access_ok 重要的函数指针传递分析</title>
    <link href="https://www.zi-c.wang/2020/12/15/access-ok-%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%BC%A0%E9%80%92%E5%88%86%E6%9E%90/"/>
    <id>https://www.zi-c.wang/2020/12/15/access-ok-%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%BC%A0%E9%80%92%E5%88%86%E6%9E%90/</id>
    <published>2020-12-15T01:45:55.000Z</published>
    <updated>2020-12-15T01:47:24.600Z</updated>
    
    
    <summary type="html">&lt;p&gt;/arch/x86/include/asm/uaccess.h&lt;/p&gt;
&lt;p&gt;用于检查user space 的指针，是否超过用户地址空间的界限，读取或写入内核地址。&lt;/p&gt;
&lt;p&gt;Checks if a pointer to a block of memory in user space is valid.&lt;/p&gt;
&lt;p&gt;Note that, depending on architecture, this function probably just checks that the pointer is in the user space range&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>typedef code pointer 代码指针</title>
    <link href="https://www.zi-c.wang/2020/12/12/typedef-code-pointer-%E4%BB%A3%E7%A0%81%E6%8C%87%E9%92%88/"/>
    <id>https://www.zi-c.wang/2020/12/12/typedef-code-pointer-%E4%BB%A3%E7%A0%81%E6%8C%87%E9%92%88/</id>
    <published>2020-12-12T08:55:39.000Z</published>
    <updated>2020-12-12T08:56:46.222Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;typedef&lt;/code&gt; 是把一个名字和一个类型联系起来。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef int myinteger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef char *mystring;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef void (*myfunc)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myinteger i;   &amp;#x2F;&amp;#x2F; is equivalent to    int i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mystring s;    &amp;#x2F;&amp;#x2F; is the same as      char *s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myfunc f;      &amp;#x2F;&amp;#x2F; compile equally as  void (*f)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
    <category term="c" scheme="https://www.zi-c.wang/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>kernel memory layout</title>
    <link href="https://www.zi-c.wang/2020/12/11/kernel-memory-layout/"/>
    <id>https://www.zi-c.wang/2020/12/11/kernel-memory-layout/</id>
    <published>2020-12-11T13:20:41.000Z</published>
    <updated>2020-12-11T13:22:03.478Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/x86/x86_64/mm.html&quot;&gt;latest mm documentation&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/x86/boot.html?highlight=layout&quot;&gt;latest boot documentatino&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/338009/&quot;&gt;x86: fix return from kernel to userspace with 16-bit stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;/Documentation/x86/x86_64/mm.txt&lt;/p&gt;
&lt;p&gt;/Documentation/x86/boot.txt&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux User-mode Driver</title>
    <link href="https://www.zi-c.wang/2020/11/28/Linux-User-mode-Driver/"/>
    <id>https://www.zi-c.wang/2020/11/28/Linux-User-mode-Driver/</id>
    <published>2020-11-28T07:18:10.000Z</published>
    <updated>2020-12-01T07:43:04.395Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;UIO-userspace-i-o&quot;&gt;&lt;a href=&quot;#UIO-userspace-i-o&quot; class=&quot;headerlink&quot; title=&quot;UIO userspace i/o&quot;&gt;&lt;/a&gt;UIO userspace i/o&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/825190/&quot;&gt;20200702Make the user mode driver code a better citizen&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/66829/&quot;&gt;20040120User-space device drivers&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://tldp.org/LDP/khg/HyperNews/get/devices/fake.html&quot;&gt;tldp userspace device driver&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/703785/&quot;&gt;20161019Linux drivers in user space — a survey&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lwn.net/Articles/232575/&quot;&gt;UIO: user-space drivers&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.kernel.org/doc/html/latest/driver-api/uio-howto.html?highlight=uio&quot;&gt;The Userspace I/O HOWTO&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="Driver" scheme="https://www.zi-c.wang/tags/Driver/"/>
    
    <category term="Linux" scheme="https://www.zi-c.wang/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>kernel-exploit-vm搭建</title>
    <link href="https://www.zi-c.wang/2020/11/28/kernel-exploit-vm%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.zi-c.wang/2020/11/28/kernel-exploit-vm%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-28T07:15:29.000Z</published>
    <updated>2020-11-28T07:19:06.967Z</updated>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;环境：Manjaro(archlinux)18   Linux wangzc-pc 4.14.193-1-MANJARO  x86_64 GNU/Linux&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="vm" scheme="https://www.zi-c.wang/tags/vm/"/>
    
    <category term="exploit" scheme="https://www.zi-c.wang/tags/exploit/"/>
    
  </entry>
  
  <entry>
    <title>二叉树非递归遍历</title>
    <link href="https://www.zi-c.wang/2020/11/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/"/>
    <id>https://www.zi-c.wang/2020/11/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/</id>
    <published>2020-11-24T02:28:59.000Z</published>
    <updated>2020-11-24T05:43:42.653Z</updated>
    
    
    <summary type="html">&lt;p&gt;二叉树非递归遍历总是容易忘，这次从原理出发理解一次。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#x2F; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2   3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#x2F; \ &amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4  5 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="leetcode" scheme="https://www.zi-c.wang/tags/leetcode/"/>
    
    <category term="algorithm" scheme="https://www.zi-c.wang/tags/algorithm/"/>
    
    <category term="binarytree" scheme="https://www.zi-c.wang/tags/binarytree/"/>
    
  </entry>
  
  <entry>
    <title>NJU研究生通知RSS</title>
    <link href="https://www.zi-c.wang/2020/11/19/NJU%E7%A0%94%E7%A9%B6%E7%94%9F%E9%80%9A%E7%9F%A5RSS/"/>
    <id>https://www.zi-c.wang/2020/11/19/NJU%E7%A0%94%E7%A9%B6%E7%94%9F%E9%80%9A%E7%9F%A5RSS/</id>
    <published>2020-11-19T06:39:45.000Z</published>
    <updated>2020-11-21T08:54:32.396Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;NJU-notifeed&quot;&gt;&lt;a href=&quot;#NJU-notifeed&quot; class=&quot;headerlink&quot; title=&quot;NJU-notifeed&quot;&gt;&lt;/a&gt;NJU-notifeed&lt;/h1&gt;&lt;p&gt;Nanjing University notification feed&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/purplewall1206/NJU-notifeed&quot;&gt;https://github.com/purplewall1206/NJU-notifeed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接订阅：&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://idcvz.zi-c.wang:8000/rss&quot;&gt;http://idcvz.zi-c.wang:8000/rss&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://www.zi-c.wang/categories/python/"/>
    
    <category term="rss" scheme="https://www.zi-c.wang/categories/python/rss/"/>
    
    <category term="github" scheme="https://www.zi-c.wang/categories/python/rss/github/"/>
    
    
    <category term="python" scheme="https://www.zi-c.wang/tags/python/"/>
    
    <category term="rss" scheme="https://www.zi-c.wang/tags/rss/"/>
    
    <category term="github" scheme="https://www.zi-c.wang/tags/github/"/>
    
    <category term="NJU" scheme="https://www.zi-c.wang/tags/NJU/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 内核编译</title>
    <link href="https://www.zi-c.wang/2020/11/16/Raspberry-Pi-%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/"/>
    <id>https://www.zi-c.wang/2020/11/16/Raspberry-Pi-%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</id>
    <published>2020-11-16T12:06:10.000Z</published>
    <updated>2020-11-16T12:10:02.276Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我的版本 : 树莓派3&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-内核获取&quot;&gt;&lt;a href=&quot;#1-内核获取&quot; class=&quot;headerlink&quot; title=&quot;1.内核获取&quot;&gt;&lt;/a&gt;1.内核获取&lt;/h1&gt;&lt;h2 id=&quot;1-1-软件下载&quot;&gt;&lt;a href=&quot;#1-1-软件下载&quot; class=&quot;headerlink&quot; title=&quot;1.1.软件下载&quot;&gt;&lt;/a&gt;1.1.软件下载&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sudo apt install git bc bison flex libssl-dev make&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/categories/kernel/"/>
    
    <category term="raspberryPi" scheme="https://www.zi-c.wang/categories/kernel/raspberryPi/"/>
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="raspberryPi" scheme="https://www.zi-c.wang/tags/raspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>三剑客sed/awk/grep常用速查</title>
    <link href="https://www.zi-c.wang/2020/11/16/%E4%B8%89%E5%89%91%E5%AE%A2sed-awk-grep%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/"/>
    <id>https://www.zi-c.wang/2020/11/16/%E4%B8%89%E5%89%91%E5%AE%A2sed-awk-grep%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/</id>
    <published>2020-11-16T06:22:23.000Z</published>
    <updated>2020-11-16T06:24:22.817Z</updated>
    
    
    <summary type="html">&lt;p&gt;sed和awk的区别，都是按行读入，但是awk会拆分行里面的元素，sed则直接用正则做匹配，基本上sed可以做到的awk都可以。&lt;/p&gt;
&lt;h1 id=&quot;awk&quot;&gt;&lt;a href=&quot;#awk&quot; class=&quot;headerlink&quot; title=&quot;awk&quot;&gt;&lt;/a&gt;awk&lt;/h1&gt;&lt;p&gt;&lt;code&gt;awk &amp;#39;&amp;#123;printf &amp;quot;%-8s %-8s %-8s %-18s %-22s %-15s\n&amp;quot;,$1,$2,$3,$4,$5,$6&amp;#125;&amp;#39; netstat.txt&lt;/code&gt; awk 使用print和printf打印每行中按列分布的元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;awk &amp;#39;$3==0 &amp;amp;&amp;amp; $6==&amp;quot;ESTABLISHED&amp;quot;&amp;#39; netstat.txt&lt;/code&gt; 过滤记录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;awk &amp;#39;$3==0 &amp;amp;&amp;amp; $6==&amp;quot;ESTABLISHED&amp;quot; || NR==1 &amp;#123;printf &amp;quot;%02s %s %-20s %-20s %s\n&amp;quot;,NR, FNR, $4,$5,$6&amp;#125;&amp;#39; netstat.txt&lt;/code&gt; 其中NR，FNR为内建变量&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://www.zi-c.wang/categories/linux/"/>
    
    <category term="bash" scheme="https://www.zi-c.wang/categories/linux/bash/"/>
    
    
    <category term="bash" scheme="https://www.zi-c.wang/tags/bash/"/>
    
    <category term="linux" scheme="https://www.zi-c.wang/tags/linux/"/>
    
    <category term="tool" scheme="https://www.zi-c.wang/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>kernel contribution 统计</title>
    <link href="https://www.zi-c.wang/2020/11/16/kernel-contribution-%E7%BB%9F%E8%AE%A1/"/>
    <id>https://www.zi-c.wang/2020/11/16/kernel-contribution-%E7%BB%9F%E8%AE%A1/</id>
    <published>2020-11-16T06:19:37.000Z</published>
    <updated>2020-11-16T06:24:36.180Z</updated>
    
    
    <summary type="html">&lt;p&gt;保存lwn.net发布的新版本开发统计文章，目前来看还是华为最屌。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/780271/&quot;&gt;Development statistics for the 5.0 kernel&lt;/a&gt;&lt;br&gt;As of this writing, 12,517 non-merge changesets have been pulled into the mainline repository for the 5.0 release&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/810639/&quot;&gt;Some 5.5 kernel development statistics&lt;/a&gt;&lt;br&gt;5.5 saw the merging of 14,350 non-merge changesets from 1,885 developers&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="lwn.net" scheme="https://www.zi-c.wang/tags/lwn-net/"/>
    
  </entry>
  
  <entry>
    <title>io_uring 系统性整理</title>
    <link href="https://www.zi-c.wang/2020/11/15/io-uring-%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%95%B4%E7%90%86/"/>
    <id>https://www.zi-c.wang/2020/11/15/io-uring-%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%95%B4%E7%90%86/</id>
    <published>2020-11-15T11:42:54.000Z</published>
    <updated>2020-11-15T11:52:18.240Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;io-uring-系统性整理&quot;&gt;&lt;a href=&quot;#io-uring-系统性整理&quot; class=&quot;headerlink&quot; title=&quot;io_uring 系统性整理&quot;&gt;&lt;/a&gt;io_uring 系统性整理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#io_uring-%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%95%B4%E7%90%86&quot;&gt;io_uring 系统性整理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#io-%E6%A8%A1%E5%9E%8B&quot;&gt;I/O 模型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#comparison&quot;&gt;comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#asynchronous-io&quot;&gt;Asynchronous I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#io_uring&quot;&gt;io_uring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93%E9%82%AE%E4%BB%B6&quot;&gt;总结邮件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有个误解，I/O模型其实是针对整个系统的所有I/O操作的，但是平时很少对文件系统使用异步读写，同步或直接映射的情况比较多。更别提多路复用了，这个机制基本只用在network中。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lwn.net/Kernel/Index/&quot;&gt;lwn Kernel article index&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
    <category term="io_uring" scheme="https://www.zi-c.wang/tags/io-uring/"/>
    
  </entry>
  
  <entry>
    <title>eBPF 简介</title>
    <link href="https://www.zi-c.wang/2020/11/15/eBPF-%E7%AE%80%E4%BB%8B/"/>
    <id>https://www.zi-c.wang/2020/11/15/eBPF-%E7%AE%80%E4%BB%8B/</id>
    <published>2020-11-15T11:17:06.000Z</published>
    <updated>2020-11-15T11:52:20.424Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;eBPF&quot;&gt;&lt;a href=&quot;#eBPF&quot; class=&quot;headerlink&quot; title=&quot;eBPF&quot;&gt;&lt;/a&gt;eBPF&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ebpf&quot;&gt;eBPF&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E7%AE%80%E4%BB%8B&quot;&gt;1. 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E5%8F%82%E8%80%83%E6%9D%90%E6%96%99&quot;&gt;2. 参考材料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-in-kernel-virtual-machine&quot;&gt;3. in-kernel virtual machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-jit-just-in-time-compile&quot;&gt;4. JIT just-in-time compile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-kprobe-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86&quot;&gt;5. kprobe 实现原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://ebpf.io/summit-2020/&quot;&gt;ebpf summit 2020峰会&lt;/a&gt; 这个有时间应该看一下&lt;/p&gt;
&lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;eBPF由BPF（berkeley packet filter发展而来，BPF现在也叫classic-BPF由于区别BPF），到目前为止被引入了linux内核并且使用了JIT just in time comilper进行加速，类似于浏览器的javascript脚本执行语言。&lt;/p&gt;
&lt;p&gt;eBPF定义了一个内核内运行的虚拟机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/11/15/eBPF-%E7%AE%80%E4%BB%8B/ebpf-arch.png&quot; alt=&quot;ebpf-arch&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用bcc进行bpf的开发，bcc和bpftrace项目的维护放在 &lt;strong&gt;iovisor&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="eBPF" scheme="https://www.zi-c.wang/categories/eBPF/"/>
    
    
    <category term="eBPF" scheme="https://www.zi-c.wang/tags/eBPF/"/>
    
  </entry>
  
  <entry>
    <title>内核近期改变</title>
    <link href="https://www.zi-c.wang/2020/11/15/%E5%86%85%E6%A0%B8%E8%BF%91%E6%9C%9F%E6%94%B9%E5%8F%98/"/>
    <id>https://www.zi-c.wang/2020/11/15/%E5%86%85%E6%A0%B8%E8%BF%91%E6%9C%9F%E6%94%B9%E5%8F%98/</id>
    <published>2020-11-15T11:09:13.000Z</published>
    <updated>2020-11-15T11:52:26.240Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;内核近期改变&quot;&gt;&lt;a href=&quot;#内核近期改变&quot; class=&quot;headerlink&quot; title=&quot;内核近期改变&quot;&gt;&lt;/a&gt;内核近期改变&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%86%85%E6%A0%B8%E8%BF%91%E6%9C%9F%E6%94%B9%E5%8F%98&quot;&gt;内核近期改变&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1%E5%8E%9F%E5%A7%8B%E7%89%88%E6%9C%AC%E7%9A%84ioctl&quot;&gt;1.原始版本的ioctl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2%E5%86%85%E6%A0%B8%E6%94%B9%E8%BF%9B%E5%90%8E%E7%9A%84ioctl&quot;&gt;2.内核改进后的ioctl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3%E5%9C%A8%E7%BC%96%E5%86%99%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95&quot;&gt;3.在编写过程中的处理办法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90&quot;&gt;4. 原因分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%BC%82%E6%AD%A5io-read_iter&quot;&gt;异步I/O read_iter&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1%E5%85%B7%E4%BD%93%E5%8F%98%E5%8C%96&quot;&gt;1.具体变化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90&quot;&gt;2.原因分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3%E9%97%AE%E9%A2%98&quot;&gt;3.问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timer%E8%AE%A1%E6%97%B6%E5%99%A8%E5%8F%91%E7%94%9F%E6%94%B9%E5%8F%98&quot;&gt;timer计时器发生改变&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#block-%E9%A9%B1%E5%8A%A8%E5%9C%A850%E5%90%8E%E8%BF%9B%E8%A1%8C%E4%BA%86%E9%9D%9E%E5%B8%B8%E5%A4%A7%E7%9A%84%E5%8F%98%E5%8C%96&quot;&gt;block 驱动在5.0后进行了非常大的变化&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8E%9F%E5%9B%A0&quot;&gt;原因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blk-mq-%E8%AE%BE%E8%AE%A1%E4%BA%86%E4%B8%A4%E5%B1%82%E9%98%9F%E5%88%97&quot;&gt;blk-mq 设计了两层队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9C%A8%E6%9E%B6%E6%9E%84%E5%B1%82%E9%9D%A2&quot;&gt;在架构层面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B7%E4%BD%93%E5%88%B0%E5%87%BD%E6%95%B0&quot;&gt;具体到函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%86%85%E6%A0%B8%E8%AE%A1%E6%97%B6%E6%8E%A5%E5%8F%A3%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96&quot;&gt;内核计时接口发生变化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%8E%A5%E5%8F%A3%E5%8F%98%E5%8C%96%E6%9C%AA%E8%A7%A3%E5%86%B3&quot;&gt;系统调用初始化接口变化（未解决）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%87%8F%E5%B0%91%E5%AE%9A%E4%B9%89%E6%95%B0%E9%87%8F-%E6%9C%AA%E8%A7%A3%E5%86%B3&quot;&gt;文件系统减少定义数量 （未解决）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jprobe-%E8%A2%AB%E5%8F%96%E6%B6%88&quot;&gt;jprobe 被取消&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://www.zi-c.wang/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>dynamicprogramming.md</title>
    <link href="https://www.zi-c.wang/2020/11/15/dynamicprogramming-md/"/>
    <id>https://www.zi-c.wang/2020/11/15/dynamicprogramming-md/</id>
    <published>2020-11-15T10:36:17.000Z</published>
    <updated>2020-11-15T11:52:25.507Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;动态规划-Dynamic-Programming&quot;&gt;&lt;a href=&quot;#动态规划-Dynamic-Programming&quot; class=&quot;headerlink&quot; title=&quot;动态规划 Dynamic Programming&quot;&gt;&lt;/a&gt;动态规划 Dynamic Programming&lt;/h1&gt;&lt;p&gt;动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。1957年出版了他的名著《Dynamic Programming》，这是该领域的第一本著作。&lt;/p&gt;
&lt;h2 id=&quot;tricky&quot;&gt;&lt;a href=&quot;#tricky&quot; class=&quot;headerlink&quot; title=&quot;tricky&quot;&gt;&lt;/a&gt;tricky&lt;/h2&gt;&lt;p&gt;一般不要求记录解空间具体内容的，但是看起来好像需要从所有解中提取结果的都可以试试看动态规划，设计不好dp不妨试试看从0到i的物品的xxx，dp有可能是1维2维甚至3维。&lt;/p&gt;
&lt;p&gt;如果要求解空间具体内容的上backtrack也不错，而且dp的题也可以用backtrack或者dfs碰碰运气。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="https://www.zi-c.wang/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="https://www.zi-c.wang/tags/leetcode/"/>
    
    <category term="algorithm" scheme="https://www.zi-c.wang/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.zi-c.wang/2020/11/14/hello-world/"/>
    <id>https://www.zi-c.wang/2020/11/14/hello-world/</id>
    <published>2020-11-14T08:54:12.760Z</published>
    <updated>2020-11-15T11:22:11.557Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nutch2.3.1+hbase-0.98-hadoop+solr5.2.1的自动部署脚本</title>
    <link href="https://www.zi-c.wang/2016/10/18/Nutch2.3.1+hbase-0.98-hadoop+solr5.2.1%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>https://www.zi-c.wang/2016/10/18/Nutch2.3.1+hbase-0.98-hadoop+solr5.2.1%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</id>
    <published>2016-10-18T09:50:10.000Z</published>
    <updated>2020-11-22T08:51:15.510Z</updated>
    
    
    <summary type="html">&lt;p&gt;在阳总的帮助下，终于搞出了这个自动部署脚本，感谢阳总让我第一次看到真人写的bash脚本，很涨姿势。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hbase-0.98-hadoop 的选择原因是[&lt;a href=&quot;http://wiki.apache.org/nutch/Nutch2Tutorial&quot;&gt;http://wiki.apache.org/nutch/Nutch2Tutorial&lt;/a&gt; ](nutch turorial)上这么推荐的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;solr5.x 的玩法似乎和solr4.9 差别不小，之后应该会单独写一篇分析的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试环境是 centos6环境，使用ubuntu或者其他发行版的兄弟记得改下 那堆yum，rpm&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="markdown" scheme="https://www.zi-c.wang/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>nutch-2.3.1+hbase-0.94+eclipse 环境搭建教程</title>
    <link href="https://www.zi-c.wang/2016/03/08/nutch-2.3.1+hbase-0.94+eclipse%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.zi-c.wang/2016/03/08/nutch-2.3.1+hbase-0.94+eclipse%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2016-03-08T15:52:10.000Z</published>
    <updated>2020-11-22T08:50:36.390Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;1-开发环境及软件版本&quot;&gt;&lt;a href=&quot;#1-开发环境及软件版本&quot; class=&quot;headerlink&quot; title=&quot;1.开发环境及软件版本&quot;&gt;&lt;/a&gt;1.开发环境及软件版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;centos 6.7&lt;/li&gt;
&lt;li&gt;apache-nutch-2.3.1&lt;/li&gt;
&lt;li&gt;hbase-0.94&lt;/li&gt;
&lt;li&gt;eclipse javaEE&lt;/li&gt;
&lt;li&gt;jdk8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-安装并配置jdk&quot;&gt;&lt;a href=&quot;#2-安装并配置jdk&quot; class=&quot;headerlink&quot; title=&quot;2.安装并配置jdk&quot;&gt;&lt;/a&gt;2.安装并配置jdk&lt;/h2&gt;</summary>
    
    
    
    
    <category term="hbase" scheme="https://www.zi-c.wang/tags/hbase/"/>
    
    <category term="nutch" scheme="https://www.zi-c.wang/tags/nutch/"/>
    
  </entry>
  
  <entry>
    <title>hbase的常用shell</title>
    <link href="https://www.zi-c.wang/2016/01/20/hbase%E5%B8%B8%E7%94%A8shell/"/>
    <id>https://www.zi-c.wang/2016/01/20/hbase%E5%B8%B8%E7%94%A8shell/</id>
    <published>2016-01-20T02:43:10.000Z</published>
    <updated>2020-11-22T08:52:48.260Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;1-打开hbase并进入hbase-shell-console&quot;&gt;&lt;a href=&quot;#1-打开hbase并进入hbase-shell-console&quot; class=&quot;headerlink&quot; title=&quot;1.打开hbase并进入hbase shell console&quot;&gt;&lt;/a&gt;1.打开hbase并进入hbase shell console&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
$HBASE_HOME/bin/start-hbase.sh
$HBASE_HOME/bin/hbase shell
hbase(main)&gt; whoami
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="markdown" scheme="https://www.zi-c.wang/tags/markdown/"/>
    
    <category term="hbase" scheme="https://www.zi-c.wang/tags/hbase/"/>
    
  </entry>
  
  <entry>
    <title>可能经常用到的markdown语法和标签插件</title>
    <link href="https://www.zi-c.wang/2016/01/20/%E5%8F%AF%E8%83%BD%E7%BB%8F%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E5%92%8C%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/"/>
    <id>https://www.zi-c.wang/2016/01/20/%E5%8F%AF%E8%83%BD%E7%BB%8F%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84markdown%E8%AF%AD%E6%B3%95%E5%92%8C%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/</id>
    <published>2016-01-20T02:43:10.000Z</published>
    <updated>2020-11-22T08:50:48.340Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本文没有系统介绍markdown语法和标签插件，而是仅仅列举的可能经常使用的markdown语法和标签插件样式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;l&amp;gt;&amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;“ 都可以表示分点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First&lt;/li&gt;
&lt;li&gt;Second&lt;/li&gt;
&lt;li&gt;Third&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="markdown" scheme="https://www.zi-c.wang/tags/markdown/"/>
    
  </entry>
  
</feed>
